{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.3.4",
    "schemaVersion": 1002,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "docComment": "",
  "name": "framer-motion",
  "members": [
    {
      "kind": "EntryPoint",
      "name": "",
      "members": [
        {
          "kind": "Variable",
          "docComment": "/**\n * The `AnimatePresence` component enables the use of the `exit` prop to animate components when they're removed from the component tree.\n *\n * When adding/removing more than a single child component, every component **must** be given a unique `key` prop.\n *\n * You can propagate exit animations throughout a tree by using variants.\n *\n * @library\n *\n * You can use any component(s) within `AnimatePresence`, but the first `Frame` in each should have an `exit` property defined.\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * @motion\n *\n * You can use any component(s) within `AnimatePresence`, but the first `motion` component in each should have an `exit` property defined.\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "AnimatePresence"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "FunctionComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnimatePresenceProps"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "AnimatePresence",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "AnimatePresenceProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimatePresenceProps",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When a component is removed, there's no longer a chance to update its props. So if a component's `exit` prop is defined as a dynamic variant and you want to pass a new `custom` prop, you can do so via `AnimatePresence`. This will ensure all leaving components animate using the latest data.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "custom"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "custom",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * If set to `true`, `AnimatePresence` will only render one component at a time. The exiting component will finished its exit animation before the entering component is rendered.\n *\n * @library\n * ```jsx\n * function MyComponent({ currentItem }) {\n *   return (\n *     <AnimatePresence exitBeforeEnter>\n *       <Frame key={currentItem} exit={{ opacity: 0 }} />\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * @motion\n * ```jsx\n * const MyComponent = ({ currentItem }) => (\n *   <AnimatePresence exitBeforeEnter>\n *     <motion.div key={currentItem} exit={{ opacity: 0 }} />\n *   </AnimatePresence>\n * )\n * ```\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "exitBeforeEnter"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "exitBeforeEnter",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * By passing `initial={false}`, `AnimatePresence` will disable any initial animations on children that are present when the component is first rendered.\n *\n * @library\n * ```jsx\n * <AnimatePresence initial={false}>\n *   {isVisible && (\n *     <Frame\n *       key=\"modal\"\n *       initial={{ opacity: 0 }}\n *       animate={{ opacity: 1 }}\n *       exit={{ opacity: 0 }}\n *     />\n *   )}\n * </AnimatePresence>\n * ```\n *\n * @motion\n * ```jsx\n * <AnimatePresence initial={false}>\n *   {isVisible && (\n *     <motion.div\n *       key=\"modal\"\n *       initial={{ opacity: 0 }}\n *       animate={{ opacity: 1 }}\n *       exit={{ opacity: 0 }}\n *     />\n *   )}\n * </AnimatePresence>\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "initial"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initial",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Fires when all exiting nodes have completed animating out.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onExitComplete"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExitComplete",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "docComment": "/**\n * Control animations on one or more components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "AnimationControls"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimationControls",
          "members": [
            {
              "kind": "Method",
              "docComment": "/**\n * Instantly set to a set of properties or a variant.\n * ```jsx\n * // With properties\n * controls.set({ opacity: 0 })\n *\n * // With variants\n * controls.set(\"hidden\")\n * ```\n *\n * @internalremarks\n *\n * We could perform a similar trick to `.start` where this can be called before mount and we maintain a list of of pending actions that get applied on mount. But the expectation of `set` is that it happens synchronously and this would be difficult to do before any children have even attached themselves. It's also poor practise and we should discourage render-synchronous `.start` calls rather than lean into this.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "set"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "definition"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationDefinition"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "definition",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Starts an animation on all linked components.\n *\n * @remarks\n * ```jsx\n * controls.start(\"variantLabel\")\n * controls.start({\n *   x: 0,\n *   transition: { duration: 1 }\n * })\n * ```\n *\n * @param definition - Properties or variant label to animate to\n *\n * @param transition - Optional `transtion` to apply to a variant\n *\n * @returns - A `Promise` that resolves when all animations have completed.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "start"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "definition"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationDefinition"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "transitionOverride"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Transition"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "definition",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "transitionOverride",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Stops animations on all linked components.\n * ```jsx\n * controls.stop()\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stop"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "stop"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "AnimationProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimationProps",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Values to animate to, variant label(s), or `AnimationControls`.\n *\n * @library\n * ```jsx\n * // As values\n * <Frame animate={{ opacity: 1 }} />\n *\n * // As variant\n * <Frame animate=\"visible\" variants={variants} />\n *\n * // Multiple variants\n * <Frame animate={[\"visible\", \"active\"]} variants={variants} />\n *\n * // AnimationControls\n * <Frame animate={animation} />\n * ```\n *\n * @motion\n * ```jsx\n * // As values\n * <motion.div animate={{ opacity: 1 }} />\n *\n * // As variant\n * <motion.div animate=\"visible\" variants={variants} />\n *\n * // Multiple variants\n * <motion.div animate={[\"visible\", \"active\"]} variants={variants} />\n *\n * // AnimationControls\n * <motion.div animate={animation} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "animate"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimationControls"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TargetAndTransition"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "VariantLabels"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animate",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * A target to animate to when this component is removed from the tree.\n *\n * This component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n *\n * This limitation exists because React doesn't allow components to defer unmounting until after an animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n *\n * @library\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * export function MyComponent(props) {\n *   return (\n *     <AnimatePresence>\n *        {props.isVisible && (\n *          <Frame\n *            initial={{ opacity: 0 }}\n *            animate={{ opacity: 1 }}\n *            exit={{ opacity: 0 }}\n *          />\n *        )}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * @motion\n * ```jsx\n * import { AnimatePresence, motion } from 'framer-motion'\n *\n * export const MyComponent = ({ isVisible }) => {\n *   return (\n *     <AnimatePresence>\n *        {isVisible && (\n *          <motion.div\n *            initial={{ opacity: 0 }}\n *            animate={{ opacity: 1 }}\n *            exit={{ opacity: 0 }}\n *          />\n *        )}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "exit"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "TargetAndTransition"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "VariantLabels"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TargetResolver"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "exit",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * @library\n *\n * When a `Frame` is the child of a `Stack`, the `Stack` is responsible for its layout. This makes it difficult for to know when the layout changes and smoothly animate components to their new positions.\n *\n * By adding `layoutTransition` to a child `Frame`, it'll automatically animate to its new position when it moves in the `Stack`, whether the `Stack` layout has changed, or the `Frame` has changed order within it.\n *\n * It can either be set as a `Transition`, or just `true` to use the default layout transition.\n *\n * Animating size with `scale` can introduce visual distortion to the component's children. If unwanted, the `useInvertedScale` function can be used to undo this distortion.\n * ```jsx\n * function MyComponent({ distribution = \"space-around\" }) {\n *   const spring = {\n *     type: \"spring\",\n *     damping: 10,\n *     stiffness: 100\n *   }\n *\n *   return (\n *     <Stack distribution={distribution}>\n *       <Frame layoutTransition={spring} />\n *     </Stack>\n *   )\n * }\n * ```\n *\n * @motion\n *\n * If `layoutTransition` is defined on a `motion` component, the component will automatically animate any changes to its position **and** size.\n *\n * It will do so using performant transforms. So if a `motion` component changes position, it'll animate to its new position using `x` and `y`. If it changes size, it'll animate using `scaleX` and `scaleY`.\n *\n * Animating size with `scale` can introduce visual distortion to the component's children. If unwanted, the `useInvertedScale` function can be used to undo this distortion.\n *\n * `layoutTransition` can either be set as a `Transition`, or just `true` to use the default layout transition, which is a smooth `0.8` second ease.\n *\n * It can also be set as a function that will resolve when the component has changed layout. This function should return either a `Transition`, or `true`. For advanced use-cases where you want the component to visually stay in its previous position, this function can also return `false`. This function will receive the `delta` of the changed layout.\n * ```jsx\n * const spring = {\n *   type: \"spring\",\n *   damping: 10,\n *   stiffness: 100\n * }\n *\n * // This component will animate between sizes when `isVisible` is toggled.\n * const MyComponent = ({ isVisible }) => {\n *   return (\n *     <motion.div layoutTransition={spring}>\n *       {isVisible && <Content />}\n *     </motion.div>\n *   )\n * }\n * ```\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "layoutTransition"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Transition"
                },
                {
                  "kind": "Content",
                  "text": " | boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "ResolveLayoutTransition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Beta",
              "name": "layoutTransition",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * @library\n *\n * When a `Frame` is the child of a `Stack`, the `Stack` is responsible for its layout. This makes it harder for us to know when a `Frame`'s position changes within the `Stack` and make it animate to its new position.\n *\n * By adding `positionTransition` to a `Frame`, it'll automatically animate to its new position in the `Stack`, whether the `Stack` layout has changed or the `Frame` has changed its order within it.\n *\n * It can either be set as a `Transition`, or just `true` to use the default layout transition.\n * ```jsx\n * function MyComponent({ distribution = \"space-around\" }) {\n *   const spring = {\n *     type: \"spring\",\n *     damping: 10,\n *     stiffness: 100\n *   }\n *\n *   return (\n *     <Stack distribution={distribution}>\n *       <Frame layoutTransition={spring} />\n *     </Stack>\n *   )\n * }\n * ```\n *\n * @motion\n *\n * If `positionTransition` is defined on a `motion` component, it will automatically animate any changes to its layout using a performant `x`/`y` transform.\n *\n * `positionTransition` can either be set as a `Transition`, or just `true` to use the default position transition, which is a snappy spring.\n *\n * It can also be set as a function that will resolve when the component has changed layout. This function should return either a `Transition`, or `true`. For advanced use-cases where you want the component to visually stay in its previous position, this function can also return `false`. This function will receive the `delta` of the changed layout.\n * ```jsx\n * const spring = {\n *   type: \"spring\",\n *   damping: 10,\n *   stiffness: 100\n * }\n *\n * // This component will animate position when `isVisible` is toggled.\n * const MyComponent = ({ isOpen }) => {\n *   return (\n *     <motion.div positionTransition={spring} style={{ left: isOpen ? 0 : 100 }} />\n *   )\n * }\n *\n * // This component will animate items to their new position if its place in `items` changes order.\n * const MyComponent = ({ items }) => {\n *   return items.map((item) => (\n *     <motion.div key={item.id} positionTransition={spring} />\n *   ))\n * }\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "positionTransition"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Transition"
                },
                {
                  "kind": "Content",
                  "text": " | boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "ResolveLayoutTransition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positionTransition",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Default transition. If no `transition` is defined in `animate`, it will use the transition defined here.\n *\n * @library\n * ```jsx\n * const spring = {\n *   type: \"spring\",\n *   damping: 10,\n *   stiffness: 100\n * }\n *\n * <Frame transition={spring} animate={{ scale: 1.2 }} />\n * ```\n *\n * @motion\n * ```jsx\n * const spring = {\n *   type: \"spring\",\n *   damping: 10,\n *   stiffness: 100\n * }\n *\n * <motion.div transition={spring} animate={{ scale: 1.2 }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "transition"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Transition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transition",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Variants allow you to define animation states and organise them by name. They allow you to control animations throughout a component tree by switching a single `animate` prop.\n *\n * Using `transition` options like `delayChildren` and `staggerChildren`, you can orchestrate when children animations play relative to their parent.\n *\n * @library\n *\n * After passing variants to one or more `Frame`'s `variants` prop, these variants can be used in place of values on the `animate`, `initial`, `whileTap` and `whileHover` props.\n * ```jsx\n * const variants = {\n *   active: {\n *     backgroundColor: \"#f00\"\n *   },\n *   inactive: {\n *     backgroundColor: \"#fff\",\n *     transition: { duration: 2 }\n *   }\n * }\n *\n * <Frame variants={variants} animate=\"active\" />\n * ```\n *\n * @motion\n *\n * After passing variants to one or more `motion` component's `variants` prop, these variants can be used in place of values on the `animate`, `initial`, `whileTap` and `whileHover` props.\n * ```jsx\n * const variants = {\n *   active: {\n *       backgroundColor: \"#f00\"\n *   },\n *   inactive: {\n *     backgroundColor: \"#fff\",\n *     transition: { duration: 2 }\n *   }\n * }\n *\n * <motion.div variants={variants} animate=\"active\" />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "variants"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Variants"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "variants",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "CustomValueType"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomValueType",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "mix"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "from"
                },
                {
                  "kind": "Content",
                  "text": ": any, "
                },
                {
                  "kind": "Reference",
                  "text": "to"
                },
                {
                  "kind": "Content",
                  "text": ": any) => ("
                },
                {
                  "kind": "Reference",
                  "text": "p"
                },
                {
                  "kind": "Content",
                  "text": ": number) => number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mix",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "toValue"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "() => number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "toValue",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "docComment": "/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * @library\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <Frame onTapStart={startDrag} />\n *     <Frame drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onMouseDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "DragControls"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DragControls",
          "members": [
            {
              "kind": "Method",
              "docComment": "/**\n * Start a drag gesture on every `motion` component that has this set of drag controls passed into it via the `dragControls` prop.\n * ```jsx\n * dragControls.start(e, {\n *   snapToCursor: true\n * })\n * ```\n *\n * @param event - A mouse/touch/pointer event.\n *\n * @param options - Options\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "start"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "React"
                },
                {
                  "kind": "Content",
                  "text": "."
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React"
                },
                {
                  "kind": "Content",
                  "text": "."
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React"
                },
                {
                  "kind": "Content",
                  "text": "."
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "options"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragControlOptions"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 26,
                "endIndex": 27
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 21
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 24,
                    "endIndex": 25
                  }
                }
              ],
              "name": "start"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DraggableProps"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "DragHandlers"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DraggableProps",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Enable dragging for this element. Set to `false` by default. Set `true` to drag in both directions. Set `\"x\"` or `\"y\"` to only drag in a specific direction.\n *\n * @library\n * ```jsx\n * <Frame drag=\"x\" />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div drag=\"x\" />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "drag"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | \"x\" | \"y\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "drag",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * An object of optional `top`, `left`, `right`, `bottom` pixel values, beyond which dragging is constrained.\n *\n * Another component can be used as drag constraints by creating a `ref` with React's `useRef`.hook. This `ref` should be passed to that component's `ref` prop and to this component's `dragConstraints` prop.\n *\n * @library\n * ```jsx\n * // In pixels\n * <Frame\n *   drag=\"x\"\n *   dragConstraints={{ left: 0, right: 300 }}\n * />\n *\n * // As a ref to another component\n * function MyComponent() {\n *   const constraintsRef = useRef(null)\n *\n *   return (\n *      <Frame ref={constraintsRef} width={400} height={400}>\n *          <Frame drag dragConstraints={constraintsRef} />\n *      </Frame>\n *   )\n * }\n * ```\n *\n * @motion\n * ```jsx\n * // In pixels\n * <motion.div\n *   drag=\"x\"\n *   dragConstraints={{ left: 0, right: 300 }}\n * />\n *\n * // As a ref to another component\n * const MyComponent = () => {\n *   const constraintsRef = useRef(null)\n *\n *   return (\n *      <motion.div ref={constraintsRef}>\n *          <motion.div drag dragConstraints={constraintsRef} />\n *      </motion.div>\n *   )\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragConstraints"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "false | {\n        "
                },
                {
                  "kind": "Reference",
                  "text": "top"
                },
                {
                  "kind": "Content",
                  "text": "?: number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "right"
                },
                {
                  "kind": "Content",
                  "text": "?: number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "bottom"
                },
                {
                  "kind": "Content",
                  "text": "?: number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "left"
                },
                {
                  "kind": "Content",
                  "text": "?: number;\n    } | "
                },
                {
                  "kind": "Reference",
                  "text": "RefObject"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Element"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragConstraints",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 15
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Usually, dragging is initiated by pressing down on a component and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we might want to initiate dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into the draggable component's `dragControls` prop. It exposes a `start` method that can start dragging from pointer events on other components.\n *\n * @library\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <Frame onTapStart={startDrag} />\n *     <Frame drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onMouseDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragControls"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragControls"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragControls",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * If `true`, this will lock dragging to the initially-detected direction. Defaults to `false`.\n *\n * @library\n * ```jsx\n * <Frame drag={true} dragDirectionLock={true} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div drag dragDirectionLock />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragDirectionLock"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragDirectionLock",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The degree of movement allowed outside constraints. 0 = no movement, 1 = full movement. Set to `0.5` by default.\n *\n * @library\n * ```jsx\n * <Frame\n *   drag={true}\n *   dragConstraints={{ left: 0, right: 300 }}\n *   dragElastic={0.2}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragConstraints={{ left: 0, right: 300 }}\n *   dragElastic={0.2}\n * />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragElastic"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragElastic",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * By default, if `drag` is defined on a component then an event listener will be attached to automatically initiate dragging when a user presses down on it.\n *\n * By setting `dragListener` to `false`, this event listener will not be created.\n *\n * @library\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <Frame onTapStart={startDrag} />\n *     <Frame\n *       drag=\"x\"\n *       dragControls={dragControls}\n *       dragListener={false}\n *     />\n *   </>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onMouseDown={startDrag} />\n *     <motion.div\n *       drag=\"x\"\n *       dragControls={dragControls}\n *       dragListener={false}\n *     />\n *   </>\n * )\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragListener"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragListener",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Apply momentum from the pan gesture to the component when dragging finishes. Set to `true` by default.\n *\n * @library\n * ```jsx\n * <Frame\n *   drag={true}\n *   dragConstraints={{ left: 0, right: 300 }}\n *   dragMomentum={false}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragConstraints={{ left: 0, right: 300 }}\n *   dragMomentum={false}\n * />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragMomentum"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragMomentum",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Drag position is calculated by applying the pan offset to the x/y origin measured when the drag gesture begins.\n *\n * By manually creating `dragOriginX` as a `MotionValue`, it can be updated while the gesture is active, for instance to visually offset any movement should the component change layout.\n *\n * @library\n * ```jsx\n * const dragOriginX = useMotionValue(0)\n *\n * return <Frame dragOriginX={dragOriginX} />\n * ```\n *\n * @motion\n * ```jsx\n * const dragOriginX = useMotionValue(0)\n *\n * return <motion.div dragOriginX={dragOriginX} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragOriginX"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "MotionValue"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragOriginX",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Drag position is calculated by applying the pan offset to the x/y origin measured when the drag gesture begins.\n *\n * By manually creating `dragOriginY` as a `MotionValue`, it can be updated while the gesture is active, for instance to visually offset any movement should the component change layout.\n *\n * @library\n * ```jsx\n * const dragOriginY = useMotionValue(0)\n *\n * return <Frame dragOriginY={dragOriginY} />\n * ```\n *\n * @motion\n * ```jsx\n * const dragOriginY = useMotionValue(0)\n *\n * return <motion.div dragOriginY={dragOriginY} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragOriginY"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "MotionValue"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragOriginY",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Allows drag gesture propagation to child components. Set to `false` by default.\n *\n * @library\n * ```jsx\n * <Frame drag=\"x\" dragPropagation={true} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div drag=\"x\" dragPropagation />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragPropagation"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragPropagation",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Allows you to change dragging inertia parameters. When releasing a draggable Frame, an animation with type `inertia` starts. The animation is based on your dragging velocity. This property allows you to customize it. See {@link https://framer.com/api/animation/#inertia | Inertia} for all properties you can use.\n *\n * @library\n * ```jsx\n * <Frame\n *   drag={true}\n *   dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n * />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "dragTransition"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "InertiaOptions"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragTransition",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DragHandlers"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DragHandlers",
          "members": [
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires a drag direction is determined.\n *\n * @library\n * ```jsx\n * function onDirectionLock(axis) {\n *   console.log(axis)\n * }\n *\n * <Frame\n *   drag\n *   dragDirectionLock\n *   onDirectionLock={onDirectionLock}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragDirectionLock\n *   onDirectionLock={axis => console.log(axis)}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDirectionLock"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "axis"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "\"x\" | \"y\""
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "axis",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "onDirectionLock"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when the component is dragged.\n *\n * @library\n * ```jsx\n * function onDrag(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame drag onDrag={onDrag} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   onDrag={\n *     (event, info) => console.log(info.point.x, info.point.y)\n *   }\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDrag"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onDrag"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when dragging ends.\n *\n * @library\n * ```jsx\n * function onDragEnd(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame drag onDragEnd={onDragEnd} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   onDragEnd={\n *     (event, info) => console.log(info.point.x, info.point.y)\n *   }\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDragEnd"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onDragEnd"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when dragging starts.\n *\n * @library\n * ```jsx\n * function onDragStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame drag onDragStart={onDragStart} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   onDragStart={\n *     (event, info) => console.log(info.point.x, info.point.y)\n *   }\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDragStart"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onDragStart"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when drag momentum/bounce transition finishes.\n *\n * @library\n * ```jsx\n * function onDragTransitionEnd() {\n *   console.log('drag transition has ended')\n * }\n *\n * <Frame\n *   drag\n *   onDragTransitionEnd={onDragTransitionEnd}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   onDragTransitionEnd={() => console.log('Drag transition complete')}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onDragTransitionEnd"
                },
                {
                  "kind": "Content",
                  "text": "?(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "onDragTransitionEnd"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * A function that accepts a progress value between `0` and `1` and returns a new one.\n *\n * @library\n * ```jsx\n * const transition = {\n *   ease: progress => progress * progress\n * }\n *\n * <Frame\n *   animate={{ opacity: 0 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ opacity: 0 }}\n *   transition={{\n *     duration: 1,\n *     ease: progress => progress * progress\n *   }}\n * />\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "EasingFunction"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "v"
            },
            {
              "kind": "Content",
              "text": ": number) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EasingFunction",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "EventInfo"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EventInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "point"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "point",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "P"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefExoticComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PropsWithoutRef"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "P"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "RefAttributes"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ForwardRefComponent",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 17
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "GestureHandlers"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "PanHandlers"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TapHandlers"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "HoverHandlers"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GestureHandlers",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "HoverHandlers"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HoverHandlers",
          "members": [
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when pointer stops hovering over the component.\n *\n * @library\n * ```jsx\n * function onHoverEnd(event) {\n *   console.log(\"Hover ends\")\n * }\n *\n * <Frame onHoverEnd={onHoverEnd} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div onHoverEnd={() => console.log(\"Hover ends\")} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onHoverEnd"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "onHoverEnd"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when pointer starts hovering over the component.\n *\n * @library\n * ```jsx\n * function onHoverStart(event) {\n *   console.log(\"Hover starts\")\n * }\n *\n * <Frame onHoverStart={onHoverStart} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div onHoverStart={() => console.log('Hover starts')} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onHoverStart"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "onHoverStart"
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Properties or variant label to animate to while the hover gesture is recognised.\n *\n * @library\n * ```jsx\n * <Frame whileHover={{ scale: 1.2 }} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div whileHover={{ scale: 1.2 }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "whileHover"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TargetAndTransition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "whileHover",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TagName"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ReactHTML"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "HTMLAttributesWithoutMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UnwrapFactoryAttributes"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReactHTML"
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "TagName"
            },
            {
              "kind": "Content",
              "text": "]>, "
            },
            {
              "kind": "Reference",
              "text": "UnwrapFactoryElement"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReactHTML"
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "TagName"
            },
            {
              "kind": "Content",
              "text": "]>> & "
            },
            {
              "kind": "Reference",
              "text": "MotionProps"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "HTMLMotionProps",
          "typeParameters": [
            {
              "typeParameterName": "TagName",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 23
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * An animation that decelerates a value based on its initial velocity, usually used to implement inertial scrolling.\n *\n * Optionally, `min` and `max` boundaries can be defined, and inertia will snap to these with a spring animation.\n *\n * This animation will automatically precalculate a target value, which can be modified with the `modifyTarget` property.\n *\n * This allows you to add snap-to-grid or similar functionality.\n *\n * Inertia is also the animation used for `dragTransition`, and can be configured via that prop.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Inertia"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Inertia",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * If `min` or `max` is set, this affects the damping of the bounce spring. If set to `0`, spring will oscillate indefinitely. Set to `10` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   bounceDamping: 8\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{\n *     min: 0,\n *     max: 100,\n *     bounceDamping: 8\n *   }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "bounceDamping"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounceDamping",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * If `min` or `max` is set, this affects the stiffness of the bounce spring. Higher values will create more sudden movement. Set to `500` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   bounceStiffness: 100\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{\n *     min: 0,\n *     max: 100,\n *     bounceStiffness: 100\n *   }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "bounceStiffness"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounceStiffness",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The value to animate from. By default, this is the current state of the animating value.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   from: 50\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <Frame\n *   drag\n *   dragTransition={{ from: 50 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "from"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "from",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Maximum constraint. If set, the value will \"bump\" against this value (or immediately snap to it, if the initial animation value exceeds this value).\n *\n * @library\n * ```jsx\n * <Frame\n *   drag\n *   dragTransition={{ min: 0, max: 100 }}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ min: 0, max: 100 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "max"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Minimum constraint. If set, the value will \"bump\" against this value (or immediately spring to it if the animation starts as less than this value).\n *\n * @library\n * ```jsx\n * <Frame\n *   drag\n *   dragTransition={{ min: 0, max: 100 }}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ min: 0, max: 100 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "min"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * A function that receives the automatically-calculated target and returns a new one. Useful for snapping the target to a grid.\n *\n * @library\n * ```jsx\n * const transition = {\n *   power: 0,\n *   // Snap calculated target to nearest 50 pixels\n *   modifyTarget: target => Math.round(target / 50) * 50\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{\n *     power: 0,\n *     // Snap calculated target to nearest 50 pixels\n *     modifyTarget: target => Math.round(target / 50) * 50\n *   }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "modifyTarget"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "v"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "modifyTarget"
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * A higher power value equals a further target. Set to `0.8` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   power: 0.2\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ power: 0.2 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "power"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "power",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * End the animation if the distance to the animation target is below this value, and the absolute speed is below `restSpeed`. When the animation ends, the value gets snapped to the animation target. Set to `0.01` by default. Generally the default values provide smooth animation endings, only in rare cases should you need to customize these.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   restDelta: 10\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ restDelta: 10 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "restDelta"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "restDelta",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Adjusting the time constant will change the duration of the deceleration, thereby affecting its feel. Set to `700` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   min: 0,\n *   max: 100,\n *   timeConstant: 200\n * }\n *\n * <Frame\n *   drag\n *   dragTransition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   drag\n *   dragTransition={{ timeConstant: 200 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "timeConstant"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "timeConstant",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Set `type` to animate using the inertia animation. Set to `\"tween\"` by default. This can be used for natural deceleration, like momentum scrolling.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"inertia\",\n *   velocity: 50\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: \"inertia\", velocity: 50 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "\"inertia\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The initial velocity of the animation. By default this is the current velocity of the component.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"inertia\",\n *   velocity: 200\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'inertia', velocity: 200 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "velocity"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "velocity",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n *\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "isValidMotionProp"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "key"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "isValidMotionProp"
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "KeyframesTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "ResolvedKeyframesTarget"
            },
            {
              "kind": "Content",
              "text": " | [null, ..."
            },
            {
              "kind": "Reference",
              "text": "CustomValueType"
            },
            {
              "kind": "Content",
              "text": "[]] | "
            },
            {
              "kind": "Reference",
              "text": "CustomValueType"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "KeyframesTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "docComment": "/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @internalremarks\n *\n * I'd like to make it possible for these to be loaded \"on demand\" - to reduce bundle size by only including HTML/SVG stylers, animation and/or gesture support when necessary.\n * ```jsx\n * <motion.div animate={{ x: 100 }} />\n *\n * <motion.p animate={{ height: 200 }} />\n *\n * <svg><motion.circle r={10} animate={{ r: 20 }} /></svg>\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "motion"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "{\n    "
            },
            {
              "kind": "Reference",
              "text": "symbol"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSymbolElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSymbolElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "clipPath"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGClipPathElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGClipPathElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "filter"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFilterElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFilterElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "mask"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMaskElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMaskElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "marker"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMarkerElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMarkerElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "image"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGImageElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGImageElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "text"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTextElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTextElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "circle"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGCircleElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGCircleElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "svg"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSVGElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSVGElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "animate"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "defs"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGDefsElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGDefsElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "desc"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGDescElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGDescElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "ellipse"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGEllipseElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGEllipseElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feBlend"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEBlendElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEBlendElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feColorMatrix"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEColorMatrixElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEColorMatrixElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feComponentTransfer"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEComponentTransferElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEComponentTransferElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feComposite"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFECompositeElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFECompositeElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feConvolveMatrix"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEConvolveMatrixElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEConvolveMatrixElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feDiffuseLighting"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDiffuseLightingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDiffuseLightingElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feDisplacementMap"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDisplacementMapElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDisplacementMapElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feDistantLight"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDistantLightElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDistantLightElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feDropShadow"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDropShadowElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEDropShadowElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feFlood"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFloodElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFloodElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feFuncA"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncAElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncAElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feFuncB"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncBElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncBElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feFuncG"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncGElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncGElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feFuncR"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncRElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEFuncRElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feGaussianBlur"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEGaussianBlurElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEGaussianBlurElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feImage"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEImageElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEImageElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feMerge"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMergeElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMergeElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feMergeNode"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMergeNodeElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMergeNodeElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feMorphology"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMorphologyElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEMorphologyElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feOffset"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEOffsetElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEOffsetElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "fePointLight"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEPointLightElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFEPointLightElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feSpecularLighting"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFESpecularLightingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFESpecularLightingElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feSpotLight"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFESpotLightElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFESpotLightElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feTile"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFETileElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFETileElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "feTurbulence"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFETurbulenceElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGFETurbulenceElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "foreignObject"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGForeignObjectElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGForeignObjectElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "g"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGGElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGGElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "line"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGLineElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGLineElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "linearGradient"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGLinearGradientElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGLinearGradientElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "metadata"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMetadataElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGMetadataElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "path"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPathElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPathElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "pattern"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPatternElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPatternElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "polygon"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPolygonElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPolygonElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "polyline"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPolylineElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPolylineElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "radialGradient"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGRadialGradientElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGRadialGradientElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "rect"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGRectElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGRectElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "stop"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGStopElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGStopElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "switch"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSwitchElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGSwitchElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "textPath"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTextPathElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTextPathElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "tspan"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTSpanElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGTSpanElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "use"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGUseElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGUseElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "view"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGViewElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGViewElement"
            },
            {
              "kind": "Content",
              "text": ">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLObjectElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"object\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "style"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLStyleElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"style\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "progress"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLProgressElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"progress\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "ruby"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "table"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"table\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "small"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "sub"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "embed"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLEmbedElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"embed\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "pre"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLPreElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"pre\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "caption"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "menu"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"menu\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "button"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"button\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "menuitem"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "meter"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"meter\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "textarea"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTextAreaElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"textarea\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "time"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"time\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "link"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLLinkElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"link\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "dialog"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDialogElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"dialog\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "a"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLAnchorElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"a\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "abbr"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "address"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "area"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLAreaElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"area\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "article"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "aside"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "audio"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLAudioElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"audio\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "b"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "base"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLBaseElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"base\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "bdi"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "bdo"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "big"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "blockquote"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"blockquote\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "body"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLBodyElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"body\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "br"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLBRElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"br\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "canvas"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLCanvasElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"canvas\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "cite"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "code"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "col"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableColElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"col\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "colgroup"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableColElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"colgroup\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "data"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDataElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"data\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "datalist"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDataListElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"datalist\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "dd"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "del"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"del\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "details"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"details\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "dfn"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "div"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"div\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "dl"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDListElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"dl\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "dt"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "em"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "fieldset"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLFieldSetElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"fieldset\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "figcaption"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "figure"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "footer"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "form"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLFormElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"form\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h1"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h2"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h3"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h4"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h5"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "h6"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadingElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"h1\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "head"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHeadElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"head\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "header"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "hgroup"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "hr"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHRElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"hr\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "html"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLHtmlElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"html\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "i"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "iframe"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLIFrameElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"iframe\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "img"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLImageElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"img\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "input"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"input\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "ins"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLModElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ins\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "kbd"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "keygen"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"keygen\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "label"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLLabelElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"label\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "legend"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLLegendElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"legend\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "li"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLLIElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"li\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "main"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "map"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLMapElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"map\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "mark"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "meta"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLMetaElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"meta\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "nav"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "noscript"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "ol"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLOListElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ol\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "optgroup"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLOptGroupElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"optgroup\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "option"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLOptionElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"option\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "output"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"output\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "p"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLParagraphElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"p\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "param"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLParamElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"param\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "picture"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "q"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLQuoteElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"q\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "rp"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "rt"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "s"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "samp"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "script"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLScriptElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"script\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "section"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "select"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSelectElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"select\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "source"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSourceElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"source\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "span"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSpanElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"span\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "strong"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "summary"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "sup"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "tbody"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableSectionElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"tbody\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "td"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableDataCellElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"td\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "tfoot"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableSectionElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"tbody\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "th"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableHeaderCellElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"th\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "thead"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableSectionElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"tbody\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "title"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTitleElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"title\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "tr"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableRowElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"tr\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "track"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTrackElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"track\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "u"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "ul"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLUListElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ul\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "var"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "video"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLVideoElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"video\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "wbr"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"ruby\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "webview"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "ForwardRefComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLWebViewElement"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HTMLMotionProps"
            },
            {
              "kind": "Content",
              "text": "<\"webview\">>;\n    "
            },
            {
              "kind": "Reference",
              "text": "custom"
            },
            {
              "kind": "Content",
              "text": ": <"
            },
            {
              "kind": "Reference",
              "text": "Props"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "Component"
            },
            {
              "kind": "Content",
              "text": ": string | "
            },
            {
              "kind": "Reference",
              "text": "React"
            },
            {
              "kind": "Content",
              "text": "."
            },
            {
              "kind": "Reference",
              "text": "ComponentClass"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Props"
            },
            {
              "kind": "Content",
              "text": ", any> | "
            },
            {
              "kind": "Reference",
              "text": "React"
            },
            {
              "kind": "Content",
              "text": "."
            },
            {
              "kind": "Reference",
              "text": "FunctionComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Props"
            },
            {
              "kind": "Content",
              "text": ">) => "
            },
            {
              "kind": "Reference",
              "text": "React"
            },
            {
              "kind": "Content",
              "text": "."
            },
            {
              "kind": "Reference",
              "text": "ForwardRefExoticComponent"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React"
            },
            {
              "kind": "Content",
              "text": "."
            },
            {
              "kind": "Reference",
              "text": "PropsWithoutRef"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Props"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "MotionProps"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "React"
            },
            {
              "kind": "Content",
              "text": "."
            },
            {
              "kind": "Reference",
              "text": "RefAttributes"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Element"
            },
            {
              "kind": "Content",
              "text": ">>;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "motion",
          "variableTypeTokenRange": {
            "startIndex": 2,
            "endIndex": 1501
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "MotionAdvancedProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MotionAdvancedProps",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Custom data to use to resolve dynamic variants differently for each animating component.\n *\n * @library\n * ```jsx\n * const variants = {\n *   visible: (custom) => ({\n *     opacity: 1,\n *     transition: { delay: custom * 0.2 }\n *   })\n * }\n *\n * <Frame custom={0} animate=\"visible\" variants={variants} />\n * <Frame custom={1} animate=\"visible\" variants={variants} />\n * <Frame custom={2} animate=\"visible\" variants={variants} />\n * ```\n *\n * @motion\n * ```jsx\n * const variants = {\n *   visible: (custom) => ({\n *     opacity: 1,\n *     transition: { delay: custom * 0.2 }\n *   })\n * }\n *\n * <motion.div custom={0} animate=\"visible\" variants={variants} />\n * <motion.div custom={1} animate=\"visible\" variants={variants} />\n * <motion.div custom={2} animate=\"visible\" variants={variants} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "custom"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "custom",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Set to `false` to prevent inheriting variant changes from its parent.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "inherit"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inherit",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "MotionCallbacks"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MotionCallbacks",
          "members": [
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback when animation defined in `animate` is complete.\n *\n * @library\n * ```jsx\n * function onComplete() {\n *   console.log(\"Animation completed\")\n * }\n *\n * <Frame animate={{ x: 100 }} onAnimationComplete={onComplete} />\n * ```\n *\n * @motion\n * ```jsx\n * function onComplete() {\n *   console.log(\"Animation completed\")\n * }\n *\n * <motion.div animate={{ x: 100 }} onAnimationComplete={onComplete} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onAnimationComplete"
                },
                {
                  "kind": "Content",
                  "text": "?(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "onAnimationComplete"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback when animation defined in `animate` begins.\n *\n * @library\n * ```jsx\n * function onStart() {\n *   console.log(\"Animation completed\")\n * }\n *\n * <Frame animate={{ x: 100 }} onAnimationStart={onStart} />\n * ```\n *\n * @motion\n * ```jsx\n * function onStart() {\n *   console.log(\"Animation completed\")\n * }\n *\n * <motion.div animate={{ x: 100 }} onAnimationStart={onStart} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onAnimationStart"
                },
                {
                  "kind": "Content",
                  "text": "?(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "onAnimationStart"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback with latest motion values, fired max once per frame.\n *\n * @library\n * ```jsx\n * function onUpdate(latest) {\n *   console.log(latest.x, latest.opacity)\n * }\n *\n * <Frame animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n * ```\n *\n * @motion\n * ```jsx\n * function onUpdate(latest) {\n *   console.log(latest.x, latest.opacity)\n * }\n *\n * <motion.div animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onUpdate"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "latest"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "key"
                },
                {
                  "kind": "Content",
                  "text": ": string]: string | number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "latest",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 7
                  }
                }
              ],
              "name": "onUpdate"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * Props for `motion` components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "MotionProps"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "AnimationProps"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MotionCallbacks"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "GestureHandlers"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "DraggableProps"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MotionAdvancedProps"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MotionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Properties, variant label or array of variant labels to start in.\n *\n * Set to `false` to initialise with the values in `animate` (disabling the mount animation)\n *\n * @library\n * ```jsx\n * // As values\n * <Frame initial={{ opacity: 1 }} />\n *\n * // As variant\n * <Frame initial=\"visible\" variants={variants} />\n *\n * // Multiple variants\n * <Frame initial={[\"visible\", \"active\"]} variants={variants} />\n *\n * // As false (disable mount animation)\n * <Frame initial={false} animate={{ opacity: 0 }} />\n * ```\n *\n * @motion\n * ```jsx\n * // As values\n * <motion.div initial={{ opacity: 1 }} />\n *\n * // As variant\n * <motion.div initial=\"visible\" variants={variants} />\n *\n * // Multiple variants\n * <motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n *\n * // As false (disable mount animation)\n * <motion.div initial={false} animate={{ opacity: 0 }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "initial"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "Target"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "VariantLabels"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initial",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * @library\n *\n * The React DOM `style` prop, useful for setting CSS properties that aren't explicitly exposed by `Frame` props.\n * ```jsx\n * <Frame style={{ mixBlendMode: \"difference\" }}  />\n * ```\n *\n * @motion\n *\n * The React DOM `style` prop, enhanced with support for `MotionValue`s and separate `transform` values.\n * ```jsx\n * export const MyComponent = () => {\n *   const x = useMotionValue(0)\n *\n *   return <motion.div style={{ x, opacity: 1, scale: 0.5 }} />\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "style"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "MotionStyle"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * By default, Framer Motion generates a `transform` property with a sensible transform order. `transformTemplate` can be used to create a different order, or to append/preprend the automatically generated `transform` property.\n *\n * @library\n * ```jsx\n * function transformTemplate({ x, rotate }) {\n *   return `rotate(${rotate}deg) translateX(${x}px)`\n * }\n *\n * <Frame x={0} rotate={180} transformTemplate={transformTemplate} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   style={{ x: 0, rotate: 180 }}\n *   transformTemplate={\n *     ({ x, rotate }) => `rotate(${rotate}deg) translateX(${x}px)`\n *   }\n * />\n * ```\n *\n * @param transform - The latest animated transform props.\n *\n * @param generatedTransform - The transform string as automatically generated by Framer Motion\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "transformTemplate"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "transform"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TransformProperties"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "generatedTransform"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "transform",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "generatedTransform",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "transformTemplate"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 6
            },
            {
              "startIndex": 7,
              "endIndex": 8
            },
            {
              "startIndex": 9,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "MotionStyle"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "MotionCSS"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "MotionTransform"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "MakeMotion"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGPathProperties"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "MakeCustomValueType"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomStyles"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MotionStyle",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 15
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "MotionTransform"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "MakeMotion"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransformProperties"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MotionTransform",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Class",
          "docComment": "/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `MotionValue` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "MotionValue",
          "members": [
            {
              "kind": "Method",
              "docComment": "/**\n * Destroy and clean up subscribers to this `MotionValue`.\n *\n * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually created a `MotionValue` via the `motionValue` function.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "destroy"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "destroy"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Returns the latest state of `MotionValue`\n *\n * @returns - The latest state of `MotionValue`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "get"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "get"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Returns the latest velocity of `MotionValue`\n *\n * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getVelocity"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "getVelocity"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Returns `true` if this value is currently animating.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "isAnimating"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "isAnimating"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Adds a function that will be notified when the `MotionValue` is updated.\n *\n * It returns a function that, when called, will cancel the subscription.\n *\n * When calling `onChange` inside a React component, it should be wrapped with the `useEffect` hook. As it returns an unsubscribe function, this should be returned from the `useEffect` function to ensure you don't add duplicate subscribers..\n *\n * @library\n * ```jsx\n * function MyComponent() {\n *   const x = useMotionValue(0)\n *   const y = useMotionValue(0)\n *   const opacity = useMotionValue(1)\n *\n *   useEffect(() => {\n *     function updateOpacity() {\n *       const maxXY = Math.max(x.get(), y.get())\n *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n *       opacity.set(newOpacity)\n *     }\n *\n *     const unsubscribeX = x.onChange(updateOpacity)\n *     const unsubscribeY = y.onChange(updateOpacity)\n *\n *     return () => {\n *       unsubscribeX()\n *       unsubscribeY()\n *     }\n *   }, [])\n *\n *   return <Frame x={x} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * export const MyComponent = () => {\n *   const x = useMotionValue(0)\n *   const y = useMotionValue(0)\n *   const opacity = useMotionValue(1)\n *\n *   useEffect(() => {\n *     function updateOpacity() {\n *       const maxXY = Math.max(x.get(), y.get())\n *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n *       opacity.set(newOpacity)\n *     }\n *\n *     const unsubscribeX = x.onChange(updateOpacity)\n *     const unsubscribeY = y.onChange(updateOpacity)\n *\n *     return () => {\n *       unsubscribeX()\n *       unsubscribeY()\n *     }\n *   }, [])\n *\n *   return <motion.div style={{ x }} />\n * }\n * ```\n *\n * @param subscriber - A function that receives the latest value.\n *\n * @returns A function that, when called, will cancel this subscription.\n *\n * @internalremarks\n *\n * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n * ```jsx\n * useOnChange(x, () => {})\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onChange"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "subscription"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Subscriber"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "subscription",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 8
                  }
                }
              ],
              "name": "onChange"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Sets the state of the `MotionValue`.\n *\n * @remarks\n * ```jsx\n * const x = useMotionValue(0)\n * x.set(10)\n * ```\n *\n * @param latest - Latest value to set.\n *\n * @param render - Whether to notify render subscribers. Defaults to `true`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "set"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "v"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "render"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "render",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "docComment": "/**\n * Stop the currently active animation.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stop"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "name": "stop"
            },
            {
              "kind": "Property",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "updateAndNotify"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "v"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "render"
                },
                {
                  "kind": "Content",
                  "text": "?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "updateAndNotify",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 9
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "None"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "None",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Set `type` to `false` for an instant transition.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "false"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * Options for orchestrating the timing of animations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Orchestration"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Orchestration",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Delay the animation by this duration (in seconds). Defaults to `0`.\n *\n * @remarks\n * ```javascript\n * const transition = {\n *   delay: 0.2\n * }\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "delay"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When using variants, children animations will start after this duration (in seconds). You can add the `transition` property to both the `Frame` and the `variant` directly. Adding it to the `variant` generally offers more flexibility, as it allows you to customize the delay per visual state.\n *\n * @library\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       delayChildren: 0.5\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <Frame\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <Frame variants={item} size={50} />\n *     <Frame variants={item} size={50} />\n *   </Frame>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       delayChildren: 0.5\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <motion.ul\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <motion.li variants={item} />\n *     <motion.li variants={item} />\n *   </motion.ul>\n * )\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "delayChildren"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayChildren",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When using variants, animations of child components can be staggered by this duration (in seconds).\n *\n * For instance, if `staggerChildren` is `0.01`, the first child will be delayed by `0` seconds, the second by `0.01`, the third by `0.02` and so on.\n *\n * The calculated stagger delay will be added to `delayChildren`.\n *\n * @library\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       staggerChildren: 0.5\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <Frame\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <Frame variants={item} size={50} />\n *     <Frame variants={item} size={50} />\n *   </Frame>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       staggerChildren: 0.5\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <motion.ol\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <motion.li variants={item} />\n *     <motion.li variants={item} />\n *   </motion.ol>\n * )\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "staggerChildren"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "staggerChildren",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The direction in which to stagger children.\n *\n * A value of `1` staggers from the first to the last while `-1` staggers from the last to the first.\n *\n * @library\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       delayChildren: 0.5,\n *       staggerDirection: -1\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <Frame\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <Frame variants={item} size={50} />\n *     <Frame variants={item} size={50} />\n *   </Frame>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const container = {\n *   hidden: { opacity: 0 },\n *   show: {\n *     opacity: 1,\n *     transition: {\n *       delayChildren: 0.5,\n *       staggerDirection: -1\n *     }\n *   }\n * }\n *\n * const item = {\n *   hidden: { opacity: 0 },\n *   show: { opacity: 1 }\n * }\n *\n * return (\n *   <motion.ul\n *     variants={container}\n *     initial=\"hidden\"\n *     animate=\"show\"\n *   >\n *     <motion.li variants={item} size={50} />\n *     <motion.li variants={item} size={50} />\n *   </motion.ul>\n * )\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "staggerDirection"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "staggerDirection",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Describes the relationship between the transition and its children. Set to `false` by default.\n *\n * @remarks\n *\n * When using variants, the transition can be scheduled in relation to its children with either `\"beforeChildren\"` to finish this transition before starting children transitions, `\"afterChildren\"` to finish children transitions before starting this transition.\n *\n * @library\n * ```jsx\n * const container = {\n *   hidden: {\n *     opacity: 0,\n *     transition: { when: \"afterChildren\" }\n *   }\n * }\n *\n * const item = {\n *   hidden: {\n *     opacity: 0,\n *     transition: { duration: 2 }\n *   }\n * }\n *\n * return (\n *   <Frame variants={container} animate=\"hidden\">\n *     <Frame variants={item} size={50} />\n *     <Frame variants={item} size={50} />\n *   </Frame>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const list = {\n *   hidden: {\n *     opacity: 0,\n *     transition: { when: \"afterChildren\" }\n *   }\n * }\n *\n * const item = {\n *   hidden: {\n *     opacity: 0,\n *     transition: { duration: 2 }\n *   }\n * }\n *\n * return (\n *   <motion.ul variants={list} animate=\"hidden\">\n *     <motion.li variants={item} />\n *     <motion.li variants={item} />\n *   </motion.ul>\n * )\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "when"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "false | \"beforeChildren\" | \"afterChildren\" | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "when",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "PanHandlers"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PanHandlers",
          "members": [
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when the pan gesture is recognised on this element.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onPan={onPan} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - A {@link PanInfo} object containing `x` and `y` values for:\n *\n * - `point`: Relative to the device or page. - `delta`: Distance moved since the last event. - `offset`: Offset from the original pan event. - `velocity`: Current velocity of the pointer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onPan"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onPan"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when the pan gesture ends on this element.\n *\n * @library\n * ```jsx\n * function onPanEnd(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPanEnd={onPanEnd} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPanEnd(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onPanEnd={onPanEnd} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - A {@link PanInfo} object containing `x`/`y` values for:\n *\n * - `point`: Relative to the device or page. - `delta`: Distance moved since the last event. - `offset`: Offset from the original pan event. - `velocity`: Current velocity of the pointer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onPanEnd"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onPanEnd"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when we begin detecting a pan gesture. This is analogous to `onMouseStart` or `onTouchStart`.\n *\n * @library\n * ```jsx\n * function onPanSessionStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPanSessionStart={onPanSessionStart} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPanSessionStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onPanSessionStart={onPanSessionStart} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - An {@link EventInfo} object containing `x`/`y` values for:\n *\n * - `point`: Relative to the device or page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onPanSessionStart"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "EventInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onPanSessionStart"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback function that fires when the pan gesture begins on this element.\n *\n * @library\n * ```jsx\n * function onPanStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPanStart={onPanStart} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPanStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onPanStart={onPanStart} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - A {@link PanInfo} object containing `x`/`y` values for:\n *\n * - `point`: Relative to the device or page. - `delta`: Distance moved since the last event. - `offset`: Offset from the original pan event. - `velocity`: Current velocity of the pointer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onPanStart"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "PanInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onPanStart"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * Passed in to pan event handlers like `onPan` the `PanInfo` object contains information about the current state of the tap gesture such as its `point`, `delta`, `offset` and `velocity`.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div onPan={(event, info) => {\n *   console.log(info.point.x, info.point.y)\n * }} />\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "PanInfo"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PanInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Contains `x` and `y` values for the distance moved since the last event.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.delta.x, info.delta.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.delta.x, info.delta.y)\n * }\n *\n * <motion.div onPan={onPan} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "delta"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delta",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Contains `x` and `y` values for the distance moved from the first pan event.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.offset.x, info.offset.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.offset.x, info.offset.y)\n * }\n *\n * <motion.div onPan={onPan} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "offset"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Contains `x` and `y` values for the current pan position relative to the device or page.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onPan={onPan} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "point"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "point",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Contains `x` and `y` values for the current velocity of the pointer.\n *\n * @library\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.velocity.x, info.velocity.y)\n * }\n *\n * <Frame onPan={onPan} />\n * ```\n *\n * @motion\n * ```jsx\n * function onPan(event, info) {\n *   console.log(info.velocity.x, info.velocity.y)\n * }\n *\n * <motion.div onPan={onPan} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "velocity"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "velocity",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "PassiveEffect"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "v"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "safeSetter"
            },
            {
              "kind": "Content",
              "text": ": ("
            },
            {
              "kind": "Reference",
              "text": "v"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ") => void) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PassiveEffect",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 16
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Point"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Point",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "x"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "y"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace "
            },
            {
              "kind": "Reference",
              "text": "Point"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Point",
          "members": [
            {
              "kind": "Variable",
              "docComment": "/**\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "relativeTo"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "idOrElem"
                },
                {
                  "kind": "Content",
                  "text": ": string | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement"
                },
                {
                  "kind": "Content",
                  "text": ") => ({ "
                },
                {
                  "kind": "Reference",
                  "text": "x"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "y"
                },
                {
                  "kind": "Content",
                  "text": " }: "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                }
              ],
              "releaseTag": "Beta",
              "name": "relativeTo",
              "variableTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 15
              }
            },
            {
              "kind": "Variable",
              "docComment": "/**\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "subtract"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "a"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "b"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                }
              ],
              "releaseTag": "Beta",
              "name": "subtract",
              "variableTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 12
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "RelayoutInfo"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RelayoutInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "delta"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "{\n        "
                },
                {
                  "kind": "Reference",
                  "text": "x"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "y"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "width"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n        "
                },
                {
                  "kind": "Reference",
                  "text": "height"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delta",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 11
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ResolvedKeyframesTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[null, ...number[]] | number[] | [null, ...string[]] | string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedKeyframesTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ResolvedSingleTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedSingleTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ResolvedValueTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "ResolvedSingleTarget"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ResolvedKeyframesTarget"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedValueTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ResolveLayoutTransition"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "info"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RelayoutInfo"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Transition"
            },
            {
              "kind": "Content",
              "text": " | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolveLayoutTransition",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "SingleTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "ResolvedSingleTarget"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CustomValueType"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SingleTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * An animation that simulates spring physics for realistic motion. This is the default animation for physical values like `x`, `y`, `scale` and `rotate`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Spring"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Spring",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Strength of opposing force. If set to 0, spring will oscillate indefinitely. Set to `10` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   damping: 300\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.a\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', damping: 300 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "damping"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "damping",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The value to animate from. By default, this is the initial state of the animating value.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   from: 90\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', from: 90 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "from"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "from",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Mass of the moving object. Higher values will result in more lethargic movement. Set to `1` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   mass: 0.5\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.feTurbulence\n *   animate={{ baseFrequency: 0.5 } as any}\n *   transition={{ type: \"spring\", mass: 0.5 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "mass"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mass",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * End animation if distance is below this value and speed is below `restSpeed`. When animation ends, spring gets “snapped” to. Set to `0.01` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   restDelta: 0.5\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', restDelta: 0.5 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "restDelta"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "restDelta",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * End animation if absolute speed (in units per second) drops below this value and delta is smaller than `restDelta`. Set to `0.01` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   restSpeed: 0.5\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', restSpeed: 0.5 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "restSpeed"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "restSpeed",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Stiffness of the spring. Higher values will create more sudden movement. Set to `100` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   stiffness: 50\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.section\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', stiffness: 50 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stiffness"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stiffness",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Set `type` to `\"spring\"` to animate using spring physics for natural movement. Type is set to `\"spring\"` by default.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\"\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring' }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "\"spring\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The initial velocity of the spring. By default this is the current velocity of the component.\n *\n * @library\n * ```jsx\n * const transition = {\n *   type: \"spring\",\n *   velocity: 2\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ type: 'spring', velocity: 2 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "velocity"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "velocity",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "Subscriber"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "v"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Subscriber",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * Blanket-accept any SVG attribute as a `MotionValue`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "SVGAttributesAsMotionValues"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "MakeMotion"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SVGAttributesWithoutMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SVGAttributesAsMotionValues",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "SVGMotionProps"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "SVGAttributesAsMotionValues"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Omit"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MotionProps"
            },
            {
              "kind": "Content",
              "text": ", \"positionTransition\"> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SVGMotionProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 9
            },
            {
              "startIndex": 10,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "TapHandlers"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TapHandlers",
          "members": [
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback when the tap gesture successfully ends on this element.\n *\n * @library\n * ```jsx\n * function onTap(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onTap={onTap} />\n * ```\n *\n * @motion\n * ```jsx\n * function onTap(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTap={onTap} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onTap"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TapInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onTap"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback when the tap gesture ends outside this element.\n *\n * @library\n * ```jsx\n * function onTapCancel(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onTapCancel={onTapCancel} />\n * ```\n *\n * @motion\n * ```jsx\n * function onTapCancel(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTapCancel={onTapCancel} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onTapCancel"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TapInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onTapCancel"
            },
            {
              "kind": "MethodSignature",
              "docComment": "/**\n * Callback when the tap gesture starts on this element.\n *\n * @library\n * ```jsx\n * function onTapStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onTapStart={onTapStart} />\n * ```\n *\n * @motion\n * ```jsx\n * function onTapStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTapStart={onTapStart} />\n * ```\n *\n * @param event - The originating pointer event.\n *\n * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "onTapStart"
                },
                {
                  "kind": "Content",
                  "text": "?("
                },
                {
                  "kind": "Reference",
                  "text": "event"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TouchEvent"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PointerEvent"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "info"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TapInfo"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "onTapStart"
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Properties or variant label to animate to while the component is pressed.\n *\n * @library\n * ```jsx\n * <Frame whileTap={{ scale: 0.8 }} />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div whileTap={{ scale: 0.8 }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "whileTap"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TargetAndTransition"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "whileTap",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * Passed in to tap event handlers like `onTap` the `TapInfo` object contains information about the tap gesture such as it‘s location.\n *\n * @library\n * ```jsx\n * function onTap(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onTap={onTap} />\n * ```\n *\n * @motion\n * ```jsx\n * function onTap(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTap={onTap} />\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "TapInfo"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TapInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Contains `x` and `y` values for the tap gesture relative to the device or page.\n *\n * @library\n * ```jsx\n * function onTapStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <Frame onTapStart={onTapStart} />\n * ```\n *\n * @motion\n * ```jsx\n * function onTapStart(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTapStart={onTapStart} />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "point"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Point"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "point",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * An object that specifies values to animate to. Each value may be set either as a single value, or an array of values.\n *\n * It may also option contain these properties:\n *\n * - `transition`: Specifies transitions for all or individual values. - `transitionEnd`: Specifies values to set when the animation finishes.\n * ```jsx\n * const target = {\n *   x: \"0%\",\n *   opacity: 0,\n *   transition: { duration: 1 },\n *   transitionEnd: { display: \"none\" }\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "TargetAndTransition"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "TargetWithKeyframes"
            },
            {
              "kind": "Content",
              "text": " & {\n    "
            },
            {
              "kind": "Reference",
              "text": "transition"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "Transition"
            },
            {
              "kind": "Content",
              "text": ";\n    "
            },
            {
              "kind": "Reference",
              "text": "transitionEnd"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "Target"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TargetAndTransition",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 13
          }
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Transforms numbers into other values by mapping them from an input range to an output range. Returns the type of the input provided.\n *\n * @remarks\n *\n * Given an input range of `[0, 200]` and an output range of `[0, 1]`, this function will return a value between `0` and `1`. The input range must be a linear series of numbers. The output range can be any supported value type, such as numbers, colors, shadows, arrays, objects and more. Every value in the output range must be of the same type and in the same format.\n *\n * @library\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, transform } from \"framer\"\n *\n * export function MyComponent() {\n *    const inputRange = [0, 200]\n *    const outputRange = [0, 1]\n *    const output = transform(100, inputRange, outputRange)\n *\n *    // Returns 0.5\n *    return <Frame>{output}</Frame>\n * }\n * ```\n *\n * @motion\n * ```jsx\n * import * as React from \"react\"\n * import { transform } from \"framer-motion\"\n *\n * export function MyComponent() {\n *    const inputRange = [0, 200]\n *    const outputRange = [0, 1]\n *    const output = transform(100, inputRange, outputRange)\n *\n *    // Returns 0.5\n *    return <div>{output}</div>\n * }\n * ```\n *\n * @param inputValue - A number to transform between the input and output ranges.\n *\n * @param inputRange - A linear series of numbers (either all increasing or decreasing).\n *\n * @param outputRange - A series of numbers, colors, strings, or arrays/objects of those. Must be the same length as `inputRange`.\n *\n * @param options - Clamp: Clamp values to within the given range. Defaults to `true`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "transform"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "inputValue"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "inputRange"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "outputRange"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "options"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "TransformOptions"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 25,
            "endIndex": 26
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "inputValue",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "inputRange",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "parameterName": "outputRange",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 20,
                "endIndex": 24
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "transform"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * @library\n *\n * For improved performance, `transform` can pre-calculate the function that will transform a value between two ranges. Returns a function.\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, transform } from \"framer\"\n *\n * export function MyComponent() {\n *     const inputRange = [-200, -100, 100, 200]\n *     const outputRange = [0, 1, 1, 0]\n *     const convertRange = transform(inputRange, outputRange)\n *     const output = convertRange(-150)\n *\n *     // Returns 0.5\n *     return <Frame>{output}</Frame>\n * }\n *\n * ```\n *\n * @motion\n *\n * Transforms numbers into other values by mapping them from an input range to an output range.\n *\n * Given an input range of `[0, 200]` and an output range of `[0, 1]`, this function will return a value between `0` and `1`. The input range must be a linear series of numbers. The output range can be any supported value type, such as numbers, colors, shadows, arrays, objects and more. Every value in the output range must be of the same type and in the same format.\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, transform } from \"framer\"\n *\n * export function MyComponent() {\n *     const inputRange = [-200, -100, 100, 200]\n *     const outputRange = [0, 1, 1, 0]\n *     const convertRange = transform(inputRange, outputRange)\n *     const output = convertRange(-150)\n *\n *     // Returns 0.5\n *     return <div>{output}</div>\n * }\n *\n * ```\n *\n * @param inputRange - A linear series of numbers (either all increasing or decreasing).\n *\n * @param outputRange - A series of numbers, colors or strings. Must be the same length as `inputRange`.\n *\n * @param options - Clamp: clamp values to within the given range. Defaults to `true`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "transform"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "inputRange"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "outputRange"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "options"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "TransformOptions"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "inputValue"
            },
            {
              "kind": "Content",
              "text": ": number) => "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 21,
            "endIndex": 25
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "inputRange",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "outputRange",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 20
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "transform"
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * Transition props\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "Transition"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "Orchestration"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TransitionDefinition"
            },
            {
              "kind": "Content",
              "text": ") | ("
            },
            {
              "kind": "Reference",
              "text": "Orchestration"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TransitionMap"
            },
            {
              "kind": "Content",
              "text": ")"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Transition",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "docComment": "/**\n * An animation that animates between two or more values over a specific duration of time. This is the default animation for non-physical values like `color` and `opacity`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Tween"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Tween",
          "members": [
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The duration of the tween animation. Set to `0.3` by default, 0r `0.8` if animating a series of keyframes.\n *\n * @library\n * ```jsx\n * <Frame\n *   animate={{ opacity: 0 }}\n *   transition={{ duration: 2 }}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * const variants = {\n *   visible: {\n *     opacity: 1,\n *     transition: { duration: 2 }\n *   }\n * }\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "duration"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The easing function to use. Set as one of the below.\n *\n * - The name of an existing easing function. - An array of four numbers to define a cubic bezier curve. - An easing function, that accepts and returns a value `0-1`.\n *\n * If the animating value is set as an array of multiple values for a keyframes animation, `ease` can be set as an array of easing functions to set different easings between each of those values.\n *\n * @library\n * ```jsx\n * const transition = {\n *   ease: [0.17, 0.67, 0.83, 0.67]\n * }\n *\n * <Frame\n *   animate={{ opacity: 0 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ opacity: 0 }}\n *   transition={{ ease: [0.17, 0.67, 0.83, 0.67] }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ease"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Easing"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Easing"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ease",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When animating keyframes, `easings` can be used to define easing functions between each keyframe. This array should be one item fewer than the number of keyframes, as these easings apply to the transitions between the keyframes.\n *\n * @library\n * ```jsx\n * const transition = {\n *   easings: [\"easeIn\", \"easeOut\"]\n * }\n *\n * <Frame\n *   animate={{ backgroundColor: [\"#0f0\", \"#00f\", \"#f00\"] }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ backgroundColor: [\"#0f0\", \"#00f\", \"#f00\"] }}\n *   transition={{ easings: [\"easeIn\", \"easeOut\"] }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "easings"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Reference",
                  "text": "Easing"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "easings",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The number of times to flip the animation by swapping the `to` and `from` values. Set to `Infinity` for perpetual flipping.\n *\n * @library\n * ```jsx\n * const transition = {\n *   flip: Infinity,\n *   duration: 2\n * }\n *\n * <Frame\n *   animate={{ opacity: 0 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ opacity: 0 }}\n *   transition={{ flip: Infinity, duration: 2 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "flip"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flip",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The value to animate from. By default, this is the current state of the animating value.\n *\n * @library\n * ```jsx\n * const transition = {\n *   from: 90,\n *   duration: 2\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ from: 90, duration: 2 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "from"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "from",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The number of times to loop the animation. Set to `Infinity` for perpetual looping.\n *\n * @library\n * ```jsx\n * const transition = {\n *   loop: Infinity,\n *   ease: \"linear\",\n *   duration: 2\n * }\n *\n * <Frame\n *   animate={{ rotate: 360 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 360 }}\n *   transition={{\n *     loop: Infinity,\n *     ease: \"linear\",\n *     duration: 2\n *   }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "loop"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loop",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When repeating an animation using `loop`, `flip`, or `yoyo`, `repeatDelay` can set the duration of the time to wait, in seconds, between each repetition.\n *\n * @library\n * ```jsx\n * const transition = {\n *   yoyo: Infinity,\n *   repeatDelay: 1\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ yoyo: Infinity, repeatDelay: 1 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "repeatDelay"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "repeatDelay",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * When animating keyframes, `times` can be used to determine where in the animation each keyframe is reached. Each value in `times` is a value between `0` and `1`, representing `duration`.\n *\n * There must be the same number of `times` as there are keyframes. Defaults to an array of evenly-spread durations.\n *\n * @library\n * ```jsx\n * const transition = {\n *   times: [0, 0.1, 0.9, 1]\n * }\n *\n * <Frame\n *   animate={{ scale: [0, 1, 0.5, 1] }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ scale: [0, 1, 0.5, 1] }}\n *   transition={{ times: [0, 0.1, 0.9, 1] }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "times"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "times",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * Set `type` to `\"tween\"` to use a duration-based tween animation. If any non-orchestration `transition` values are set without a `type` property, this is used as the default animation.\n *\n * @library\n * ```jsx\n * <Frame\n *   animate={{ opacity: 0 }}\n *   transition={{ duration: 2, type: \"tween\" }}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.path\n *   animate={{ pathLength: 1 }}\n *   transition={{ duration: 2, type: \"tween\" }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "\"tween\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "docComment": "/**\n * The number of times to reverse the animation. Set to `Infinity` for perpetual reversing.\n *\n * @library\n * ```jsx\n * const transition = {\n *   yoyo: Infinity,\n *   duration: 2\n * }\n *\n * <Frame\n *   animate={{ rotate: 180 }}\n *   transition={transition}\n * />\n * ```\n *\n * @motion\n * ```jsx\n * <motion.div\n *   animate={{ rotate: 180 }}\n *   transition={{ yoyo: Infinity, duration: 2 }}\n * />\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "yoyo"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yoyo",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Experimental API.\n *\n * Makes an animated version of `useState`.\n *\n * @remarks\n *\n * When the returned state setter is called, values will be animated to their new target.\n *\n * This allows the animation of arbitrary React components.\n *\n * **Note:** When animating DOM components, it's always preferable to use the `animate` prop, as Framer will bypass React's rendering cycle with one optimised for 60fps motion. This Hook is specifically for animating props on arbitrary React components, or for animating text content.\n * ```jsx\n * const [state, setState] = useAnimatedState({ percentage: 0 })\n *\n * return (\n *   <Graph\n *     percentage={state.percentage}\n *     onTap={() => setState({ percentage: 50 })}\n *   />\n * )\n * ```\n *\n * @internalremarks\n *\n * TODO: - Make hook accept a typed version of Target that accepts any value (not just DOM values) - Allow hook to accept single values. ie useAnimatedState(0) - Allow providing MotionValues via initialState.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useAnimatedState"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "initialState"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Beta",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "initialState",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "useAnimatedState"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Creates `AnimationControls`, which can be used to manually start, stop and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * @library\n * ```jsx\n * import * as React from 'react'\n * import { Frame, useAnimation } from 'framer'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <Frame animate={controls} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useAnimation"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "AnimationControls"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [],
          "name": "useAnimation"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * @library\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, useCycle } from \"framer\"\n *\n * export function MyComponent() {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <Frame\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @motion\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n *\n * @returns [currentState, cycleState]\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useCycle"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">(..."
            },
            {
              "kind": "Reference",
              "text": "items"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CycleState"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useCycle"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive event handlers.\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n *\n * @param eventName - Name of the event you want listen for.\n *\n * @param handler - Function to fire when receiving the event.\n *\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useDomEvent"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "ref"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RefObject"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Element"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "eventName"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "handler"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "EventListener"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "options"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "AddEventListenerOptions"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 23,
            "endIndex": 24
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            },
            {
              "parameterName": "eventName",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              }
            },
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 22
              }
            }
          ],
          "name": "useDomEvent"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into the draggable component's `dragControls` prop. It exposes a `start` method that can start dragging from pointer events on other components.\n *\n * @library\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <Frame onTapStart={startDrag} />\n *     <Frame drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @motion\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onMouseDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useDragControls"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "DragControls"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [],
          "name": "useDragControls"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Add pan and tap gesture recognition to an element.\n *\n * @param props - Gesture event handlers\n *\n * @param ref - React `ref` containing a DOM `Element`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useGestures"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GestureHandlers"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "props"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "GestureHandlers"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ref"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "RefObject"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Element"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "ref",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "GestureHandlers",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useGestures"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent. By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output of those instead.\n *\n * @motion\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @library\n * ```jsx\n * function MyComponent() {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <Frame scaleX={scaleX} scaleY={scaleY} />\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useInvertedScale"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "scale"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "Partial"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ScaleMotionValues"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ScaleMotionValues"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "scale",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "name": "useInvertedScale"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * @library\n * ```jsx\n * export function MyComponent() {\n *   const scale = useMotionValue(1)\n *\n *   return <Frame scale={scale} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useMotionValue"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "initial"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "initial",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useMotionValue"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n * ```jsx\n * export function Sidebar({ isOpem }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useReducedMotion"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [],
          "name": "useReducedMotion"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber to another `MotionValue`.\n *\n * @remarks\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n *\n * @param springConfig - Configuration options for the spring.\n *\n * @returns `MotionValue`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useSpring"
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "source"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": " | number"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "config"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "SpringProps"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            }
          ],
          "name": "useSpring"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Create a `MotionValue` that transforms the output of another `MotionValue` through a function. In this example, `y` will always be double `x`.\n *\n * @library\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, useMotionValue, useTransform } from \"framer\"\n *\n * export function MyComponent() {\n *   const x = useMotionValue(10)\n *   const y = useTransform(x, value => value * 2)\n *\n *   return <Frame x={x} y={y} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * export const MyComponent = () => {\n *   const x = useMotionValue(10)\n *   const y = useTransform(x, value => value * 2)\n *\n *   return <motion.div style={{ x, y }} />\n * }\n * ```\n *\n * @param value - The `MotionValue` to transform the output of.\n *\n * @param transform - Function that accepts the output of `value` and returns a new value.\n *\n * @returns `MotionValue`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useTransform"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "parent"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "transform"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "Transformer"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parent",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "transform",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTransform"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Create a `MotionValue` that transforms the output of another `MotionValue` by mapping it from one range of values into another.\n *\n * @remarks\n *\n * Given an input range of `[-200, -100, 100, 200]` and an output range of `[0, 1, 1, 0]`, the returned `MotionValue` will:\n *\n * - When provided a value between `-200` and `-100`, will return a value between `0` and `1`. - When provided a value between `-100` and `100`, will return `1`. - When provided a value between `100` and `200`, will return a value between `1` and `0`\n *\n * The input range must be a linear series of numbers. The output range can be any value type supported by Framer Motion: numbers, colors, shadows, etc.\n *\n * Every value in the output range must be of the same type and in the same format.\n *\n * @library\n * ```jsx\n * export function MyComponent() {\n *   const x = useMotionValue(0)\n *   const xRange = [-200, -100, 100, 200]\n *   const opacityRange = [0, 1, 1, 0]\n *   const opacity = useTransform(x, xRange, opacityRange)\n *\n *   return <Frame drag=\"x\" x={x} opacity={opacity} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * export const MyComponent = () => {\n *   const x = useMotionValue(0)\n *   const xRange = [-200, -100, 100, 200]\n *   const opacityRange = [0, 1, 1, 0]\n *   const opacity = useTransform(x, xRange, opacityRange)\n *\n *   return <motion.div drag=\"x\" style={{ opacity, x }} />\n * }\n * ```\n *\n * @param inputValue - `MotionValue`\n *\n * @param inputRange - A linear series of numbers (either all increasing or decreasing)\n *\n * @param outputRange - A series of numbers, colors or strings. Must be the same length as `inputRange`.\n *\n * @param options - - clamp: boolean - Clamp values to within the given range. Defaults to `true` - ease: EasingFunction[] - Easing functions to use on the interpolations between each value in the input and output ranges. If provided as an array, the array must be one item shorter than the input and output ranges, as the easings apply to the transition **between** each.\n *\n * @returns `MotionValue`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useTransform"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">("
            },
            {
              "kind": "Reference",
              "text": "parent"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "from"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "to"
            },
            {
              "kind": "Content",
              "text": ": "
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "options"
            },
            {
              "kind": "Content",
              "text": "?: "
            },
            {
              "kind": "Reference",
              "text": "TransformOptions"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MotionValue"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 26,
            "endIndex": 30
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "parent",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            },
            {
              "parameterName": "from",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              }
            },
            {
              "parameterName": "to",
              "parameterTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 21,
                "endIndex": 25
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "useTransform"
        },
        {
          "kind": "Function",
          "docComment": "/**\n * Provides `MotionValue`s that update when the viewport scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels. - `scrollY` — Vertical scroll distance in pixels. - `scrollXProgress` — Horizontal scroll progress between `0` and `1`. - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * **Note:** If the returned scroll `MotionValue`s don't seem to be updating, double check if the `body` tag styles are set to `width: 100%; height: 100%` or similar, as this can break accurate measurement of viewport scroll.\n *\n * @library\n * ```jsx\n * import * as React from \"react\"\n * import {\n *   Frame,\n *   useViewportScroll,\n *   useTransform\n * } from \"framer\"\n *\n * export function MyComponent() {\n *   const { scrollYProgress } = useViewportScroll()\n *   return <Frame scaleX={scrollYProgress} />\n * }\n * ```\n *\n * @motion\n * ```jsx\n * export const MyComponent = () => {\n *   const { scrollYProgress } = useViewportScroll()\n *   return <motion.div style={{ scaleX: scrollYProgress }} />\n * }\n * ```\n *\n * @internalremarks\n *\n * This isn't technically a hook yet, but in the future it might be nice to accept refs to elements and add scroll listeners to those, which may involve the use of lifecycle.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function "
            },
            {
              "kind": "Reference",
              "text": "useViewportScroll"
            },
            {
              "kind": "Content",
              "text": "(): "
            },
            {
              "kind": "Reference",
              "text": "ScrollMotionValues"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 0,
          "parameters": [],
          "name": "useViewportScroll"
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "ValueTarget"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "SingleTarget"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "KeyframesTarget"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValueTarget",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "Variant"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "TargetAndTransition"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TargetResolver"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Variant",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * Either a string, or array of strings, that reference variants defined via the `variants` prop.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "VariantLabels"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VariantLabels",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type "
            },
            {
              "kind": "Reference",
              "text": "Variants"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "{\n    ["
            },
            {
              "kind": "Reference",
              "text": "key"
            },
            {
              "kind": "Content",
              "text": ": string]: "
            },
            {
              "kind": "Reference",
              "text": "Variant"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Variants",
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        }
      ]
    }
  ]
}
